{"version":3,"sources":["components/Filter/Filter.module.css","components/ContactForm/ContactForm.module.css","components/ContactList/ContactList.module.css","components/ContactForm/ContactForm.js","components/ContactList/ContactList.js","components/Filter/Filter.js","App.js","index.js","App.module.css"],"names":["module","exports","ContactForm","state","name","number","handleChange","e","currentTarget","value","setState","handleSubmit","preventDefault","props","onSubmit","className","s","contactEditor","this","label","onChange","textarea","type","pattern","title","required","button","Component","ContactList","contacts","onDeleteContact","onToggleCompleted","list","map","id","completed","classNames","item","checkbox","checked","text","pug","onClick","Filter","App","filter","addContact","contact","shortid","generate","find","alert","deleteContact","contactId","prevState","toggleCompleted","hangeFilter","getVisibleContacts","normalizedFilter","toLowerCase","includes","getCompletedContactCount","reduce","acc","todo","localStorage","getItem","parseContacts","JSON","parse","prevProps","nextContacts","setItem","stringify","totalContactsCount","length","completeContactsCount","visibleContacts","container","mainTitle","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7e130964.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"label\":\"Filter_label__366rn\",\"text\":\"Filter_text__2F5R9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactEditor\":\"ContactForm_contactEditor__sLYnK\",\"textarea\":\"ContactForm_textarea__1aJTu\",\"label\":\"ContactForm_label__pmIG5\",\"button\":\"ContactForm_button__zLInI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"ContactList_list__2Ns-h\",\"item\":\"ContactList_item__2zPLn\",\"completed\":\"ContactList_completed__3tRbu\",\"pug\":\"ContactList_pug__YpbH8\",\"text\":\"ContactList_text__3h4Sk\",\"checkbox\":\"ContactList_checkbox__JuaHt\"};","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport s from './ContactForm.module.css';\n\nclass ContactForm extends Component {\n  state = {\n    name: '',\n    number: '',\n  };\n\n  handleChange = e => {\n    const { name, value } = e.currentTarget;\n    this.setState({\n      [name]: value,\n    });\n  };\n\n  handleSubmit = e => {\n    e.preventDefault();\n    this.props.onSubmit(this.state);\n    this.setState({ name: '', number: '' });\n  };\n\n  render() {\n    return (\n      <form className={s.contactEditor} onSubmit={this.handleSubmit}>\n        <label className={s.label}>\n          Name\n          <input\n            value={this.state.name}\n            onChange={this.handleChange}\n            className={s.textarea}\n            type=\"text\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n            required\n          />\n        </label>\n        <label className={s.label}>\n          Number\n          <input\n            value={this.state.number}\n            onChange={this.handleChange}\n            className={s.textarea}\n            type=\"tel\"\n            name=\"number\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n            required\n          />\n        </label>\n        <button type=\"submit\" className={s.button}>\n          Add contact\n        </button>\n      </form>\n    );\n  }\n}\n\nContactForm.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n};\n\nexport default ContactForm;\n","import React from 'react';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\nimport s from './ContactList.module.css';\n\nconst ContactList = ({ contacts, onDeleteContact, onToggleCompleted }) => (\n  <ul className={s.list}>\n    {contacts.map(({ id, name, number, completed }) => (\n      <li key={id} className={classNames(s.item, { [s.completed]: completed })}>\n        <input\n          type=\"checkbox\"\n          className={s.checkbox}\n          checked={completed}\n          onChange={() => onToggleCompleted(id)}\n        />\n        <p className={s.text}>\n          {name}: {number}\n        </p>\n        <button\n          type=\"button\"\n          className={s.pug}\n          onClick={() => onDeleteContact(id)}\n        >\n          Delete\n        </button>\n      </li>\n    ))}\n  </ul>\n);\n\nContactList.propTypes = {\n  contacts: PropTypes.array.isRequired,\n  onDeleteContact: PropTypes.func.isRequired,\n  onToggleCompleted: PropTypes.func.isRequired,\n};\n\nexport default ContactList;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport s from './Filter.module.css';\n\nconst Filter = ({ value, onChange }) => (\n  <label className={s.label}>\n    Find contacts by name\n    <input type=\"text\" className={s.text} value={value} onChange={onChange} />\n  </label>\n);\n\nFilter.propTypes = {\n  value: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n};\n\nexport default Filter;\n","import React, { Component } from 'react';\nimport shortid from 'shortid';\n\nimport ContactForm from './components/ContactForm';\nimport ContactList from './components/ContactList';\nimport Filter from './components/Filter';\n\nimport s from './App.module.css';\n\nclass App extends Component {\n  state = {\n    contacts: [\n      {\n        id: 'id-1',\n        name: 'Rosie Simpson',\n        number: '459-12-56',\n        completed: false,\n      },\n      {\n        id: 'id-2',\n        name: 'Hermione Kline',\n        number: '443-89-12',\n        completed: false,\n      },\n      {\n        id: 'id-3',\n        name: 'Eden Clements',\n        number: '645-17-79',\n        completed: false,\n      },\n      {\n        id: 'id-4',\n        name: 'Annie Copeland',\n        number: '227-91-26',\n        completed: false,\n      },\n    ],\n    filter: '',\n  };\n\n  // --- НАЧАЛЬНЫЙ СТЕЙТ ---\n  componentDidMount() {\n    const contacts = localStorage.getItem('contacts');\n    const parseContacts = JSON.parse(contacts);\n\n    if (parseContacts) {\n      this.setState({ contacts: parseContacts });\n    }\n  }\n\n  // --- СТЕЙТ ПОСЛЕ ОБНОВЛЕНИЯ ---\n  componentDidUpdate(prevProps, prevState) {\n    const nextContacts = this.state.contacts;\n    const prevContacts = prevState.contacts;\n\n    if (nextContacts !== prevContacts) {\n      localStorage.setItem('contacts', JSON.stringify(nextContacts));\n    }\n  }\n\n  addContact = ({ name, number }) => {\n    const contact = {\n      id: shortid.generate(),\n      name,\n      number,\n      completed: false,\n    };\n\n    if (this.state.contacts.find(contact => contact.name === name)) {\n      alert(`${name} is already in contacts.`);\n    } else {\n      this.setState(({ contacts }) => ({\n        contacts: [contact, ...contacts],\n      }));\n    }\n  };\n\n  deleteContact = contactId => {\n    this.setState(prevState => ({\n      contacts: prevState.contacts.filter(contact => contact.id !== contactId),\n    }));\n  };\n\n  toggleCompleted = contactId => {\n    this.setState(({ contacts }) => ({\n      contacts: contacts.map(contact =>\n        contact.id === contactId\n          ? { ...contact, completed: !contact.completed }\n          : contact,\n      ),\n    }));\n  };\n\n  hangeFilter = e => {\n    this.setState({ filter: e.currentTarget.value });\n  };\n\n  getVisibleContacts = () => {\n    const { contacts, filter } = this.state;\n    const normalizedFilter = filter.toLowerCase();\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(normalizedFilter),\n    );\n  };\n\n  getCompletedContactCount = () => {\n    const { contacts } = this.state;\n\n    return contacts.reduce((acc, todo) => (todo.completed ? acc + 1 : acc), 0);\n  };\n\n  render() {\n    const { contacts, filter } = this.state;\n\n    const totalContactsCount = contacts.length;\n    const completeContactsCount = this.getCompletedContactCount();\n    const visibleContacts = this.getVisibleContacts();\n\n    return (\n      <div className={s.container}>\n        <h1 className={s.mainTitle}>Phonebook</h1>\n        <p className={s.text}>All contacts: {totalContactsCount}</p>\n        <p className={s.text}>Number of selected: {completeContactsCount} </p>\n\n        <ContactForm onSubmit={this.addContact} />\n        <h2 className={s.mainTitle}>Contacts</h2>\n        <Filter value={filter} onChange={this.hangeFilter} />\n        <ContactList\n          contacts={visibleContacts}\n          onDeleteContact={this.deleteContact}\n          onToggleCompleted={this.toggleCompleted}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// ========================================\n// // import { string } from 'prop-types';\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__k8cht\",\"mainTitle\":\"App_mainTitle__1mEvJ\",\"text\":\"App_text__3tX0b\"};"],"sourceRoot":""}